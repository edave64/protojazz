== protojazz v0.7

protojazz is a small wrapper around prototypes, similar to the prototype class system

protojazz provides 4 methods:

=== $.proto
$.proto generates a new prototype
example:
   Vector = $.proto({
     init : function (x,y) {
       this.x = x;
       this.y = y;
     }
   })

Another syntax for this is:
   Vector = $.proto(function(){
     this.init = function (x,y) {
       this.x = x;
       this.y = y;
     }
   })

Objects can be created with the ''new'' opperator
   v = new Vector (3,4);

Objects can also be created by calling the proto object as function.
   v = Vector(3,4);

$.proto also supports inheritance and accessing overwritten attributes via the
super method:
   SqrVector = $.proto(Vector, {
     init : function (x) {
       this.super('init',x,x)
     }
   })

If you call the super method without any argument, it returns the constructor
of the superprototype.

Note: calling something like "Vector = $.proto(Vector, {...})" would work, but
breaks the connection between Vector and its instances. To avoid
this, use $.extend, $.extendP and $.applyAttr.

Static methods can be declared using the "self" attribute:
   Vector = $.proto(Vector, {
     self : {
       create : function (x,y) {
         return Vector(x,y);
       }
     },
   })
   v = Vector.create(3,4);

A special self method is "inherited". "inherited" is called when a new prototype
is created form this prototype.
   Modifier = $.proto({
     self : {
       inherited: function (newOne) {
         if (!newOne.self) newOne.self = {}
         newOne.self.modification = true
       }
     },
   })
   Modified = $.proto(Modifier, {})
   Modified.modification #=> true

Handling getters and setter is usally quite painfull: The methods are named ugly,
IE has its complete own way. Protojazz makes that easy via the "setter" and
"getter" attributes:
   Vector = $.proto(Vector,{
     getters : {
       length : function () {
         return Math.sqrt(this.x*this.x+this.y*this.y);
       }
     },
     setters : {
       length: function (l) {
         this.x = this.x/this.length*l
         this.y = this.y/this.length*l
       }
     }
   })
   v.length //=> 5
If you want to use setters and getters, you should include the protojazz-ie
file:
  <!--[if gt IE 7]><script src="protojazz-ie-min.js"></script><![endif]-->

=== $.extend
Transfers the attributes of one object to another.
   $.extend($, {
     a : 'aaa'
   })
   $.a //=> aaa

You may also use a function to extend a object:
   $.extend($, function () {
     this.a = 'aaa'
   })

=== $.extendP
$.extendP(dest, source) is a shortcut for $.extend(dest.prototype, source).
These changes also effects the instances:
   SqrVector = $.proto(Vector, {
     init : function (x) {
       this.super('init',x,x)
     }
   })
   s = new SqrVector (3)

   $.extendP(Vector, {
     add : function (v) {
       return new Vector (this.x+v.x,this.y+v.y);
     }
   })

   s.add(v);

=== $.applyAttr
$.applyAttr(dest, source) is the method for handeling getter and setter methods:
  $.applyAttr(Vector.prototype, {
    getters: {
      angle: function(){
        return Math.atan(this.x/this.y);
      }
    }
  })
  s.angle //=> 0.7853981633974483

