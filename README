== protojazz v0.2

protojazz is a small wrapper around prototypes, similar to the prototype class system

protojazz provides 3 methods:

=== $.proto
$.proto generates a new prototype
example:
   animal = $.proto({
     noise : 'none',
     init : function (noise) {
       this.noise = noise
     }
     makeNoise : function () {
       alert(this.noise);
     }
   })

Another syntax for this is:
   animal = $.proto(function(){
     this.noise = 'none';
     this.makeNoise = function () {
       alert(this.noise);
     }
   }

Objects can be created with the new opperator
   a = new animal ('nyo');

$.proto also supports inheritance:
   cat = $.proto(animal, {
     init : function () {
       this.parent.init('nyo')
     }
   })

Static methods can be declared using the "self" attribute:
   cat = $.proto(animal, {
     self : {
       create : function () {
         return new cat;
       }
     },
   })
   cat.create().makeNoise();

Handling getters and setter is usally quite painfull: The methods are named ugly,
IE has its complete own way. Protojazz makes that easy via the "setter" and
"getter" attributes:
   Vector = $.proto({
     init: function(x,y){
       this.x = x;
       this.y = y;
     },
     getters : {
       length : function () {
         return Math.sqrt(this.x*this.x+this.y*this.y);
       }
     },
     setters : {
       length: function (l) {
         this.x = this.x/this.length*l
         this.y = this.y/this.length*l
       }
     }
   })
   v = new vector (3,4);
   v.length //=> 5
If you want to use setters and getters, you include the protojazz-ie file:
  <!--[if gt IE 7]><script src="protojazz-ie-min.js"></script><![endif]-->

=== $.extend
Transfers the attributes of one object to another.
   $.extend($, {
     a : 'aaa'
   })
   $.a

You may also use a function to extend object:
   $.extend($, function () {
     this.a = 'aaa'
   })

=== $.extendP
$.extendP(dest, source) is a shortcut for $.extend(dest.prototype, source)

$.extendP(animal, {
  fluffiness : 8
})

c = new Cat;
c.fluffiness